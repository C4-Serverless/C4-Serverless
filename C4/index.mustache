<!DOCTYPE HTML>

<html>
<head>
<script src="https://d3js.org/d3.v5.js"></script>

<style>

body {
  min-height: 100%;
  margin: 0px;
  background-color: #f2f2f2;
}

.line {
  fill: none;
  stroke: orange;
  stroke-width: 2px;
}

.hide {
   display:none;
}

.dot {
  stroke: #000;
}

tr:nth-child(even) {
  background-color: white;
}

html {
  height: 100%;
}

.menu {
  position: fixed;
  background-color: lightgray;
  float: left;
  width: 20%;
  height: 700px;
  border: 1px solid darkgray;
}

.menu button {
  text-align: left;
  cursor: pointer;
  transition: 0.3s;
  font-size: 22px;
  color: black;
  padding: 18px 12px;
  width: 100%;
  background-color: inherit;
  transition: 0.3s;
}

.menu-links {
  float: left;
  padding: 0px 12px;
  border: 1px solid #ccc;
  width: 70%;
}

.tags, .functions {
  width: 100%;
  font-size: 18px;
  padding: 1%;
}

.menu button:hover {
    background-color: #ddd;
}

.menu button.active {
    background-color: #ccc;
}
.p {
    float: right;
}

.content {
    float: right;
    padding: 0px 12px;
    border: 1px solid #ccc;
    width: 75%;
    border-left: none;
    height: 100%;
}

#info-graph{
  width:90%;
  height: 1500px;
  margin:auto;
}

.tagFunction {
  background-color: white;
  color: black;
  width: 100%;
  font-size: 18px;
  text-align: left;
  padding: 1%;
}

.graphButton {
  display: inline-block;
  margin: 30px auto 30px 400px;
}

.tableButton {
  display: inline-block;
  margin: 30px auto 30px 100px;
}

</style>
</head>
<body>

  <div class="menu"> 
    <button class="menu-links" onclick="opn(event, 'tagsOnly'); topFunction();">Tags</button>
    <button class="menu-links" onclick="opn(event, 'div-func'); topFunction();">Functions</button>
    <button class="menu-links">Export Data</button>
    <button class="menu-links">Note: Make a slider on both x and y axis to zoom in to sections</button>
    <button class="menu-links">Note2: Display function data (memory, run-time ect) beside graph</button>
  </div>

  <div class="content" id="tagsOnly">
    <h3>
        {{#tagsArray}}
          {{{.}}}
        {{/tagsArray}}
    </h3>
  </div>

  <div class="content hide" id="div-func">
    <h3> 
        {{#function}}
          {{{.}}}
        {{/function}}
    </h3>
  </div> 
  
  <div class="content hide" id="allFunctionData">
    <h3>
        {{#allFunctionData}}
          {{{.}}}
        {{/allFunctionData}}
    </h3>

  </div>

    <div id="rawTimeDurationData" style="display:none">{{rawTimeDurationData}}</div>
    <div id="info-graph" ></div>

<script id="template" type="x-tmpl-mustache">
</script>

<script>
//D3 data visualizations
var fullTestData = JSON.parse(document.getElementById('rawTimeDurationData').innerHTML);
var margin = {top:20, right: 10, bottom: 50, left: 80},
    width = 600 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom;

var x = d3.scaleTime()
	.range([0, width]);

var y = d3.scaleLinear().range([height, 0]);

var valueLine = d3.line()
    .x(function(d) {return x(d.date)})
    .y(function(d) {return y(d.duration)})

for(var func in fullTestData) {
  var testData = fullTestData[func].durationSeries;
  draw(testData, func + 'graph1');
  draw(testData, func + 'graph2');
}

function draw(testData, func){

  var data = testData;


  data.forEach((d) => {
    d.date = new Date(d.date);
    d.duration = +d.duration;
  })

   x.domain(d3.extent(data, function(d) {return d.date; }));
   y.domain([0, d3.max(data, function(d) {return d.duration; })]);
  
    var svg = d3.select(`.${func}`)
    .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    svg.append("rect")
      .attr("width", "100%")
      .attr("height", "100%")
      .attr("fill", "white");
      
  // Add the valueline path.
  //svg.append("path")
    // .data([data])
    //.attr("class", "line")
    // .attr("d", valueLine)
    // .enter();

  svg.selectAll("dot")
      .data(data)
      .enter().append("circle")
      .attr("r", 3.5)
      .attr("cx", function(d) { return x(d.date); })
      .attr("cy", function(d) { return y(d.duration); });    

  // Add the X Axis
  svg.append("g")
      .attr("transform", "translate(0," + height + ")")
      .call(d3.axisBottom(x));

  svg.append("text")             
      .attr("transform", "translate(" + (width/2) + " ," + (height + margin.top + 20) + ")")
      .style("text-anchor", "middle")
      .text("Date");    

  // Add the Y Axis
  svg.append("g")
      .call(d3.axisLeft(y));

  svg.append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 0 - 70)
      .attr("x",0 - (height / 2))
      .attr("dy", "1em")
      .style("text-anchor", "middle")
      .text("Duration (ms)");  
  }

</script>


<script>

function showGraph() {

}

function topFunction() {
    document.body.scrollTop = 0;
    document.documentElement.scrollTop = 0;
}
//aws data visualizations 
function opn(evt, menuItem) {
  var tabcontent = document.getElementsByClassName("content");
  for (var i = 0; i < tabcontent.length; i ++) {
    if (tabcontent[i].className === "content") {
      tabcontent[i].className += " hide"
    }
    if (tabcontent[i].id === menuItem) {
      tabcontent[i].className = "content"
    }
  }

  evt.currentTarget.className += " active";
}

  var acc = document.getElementsByClassName("tags");
  for (i = 0; i < acc.length; i++) {
    acc[i].addEventListener("click", function() {
        this.classList.toggle("active");
        var panel = this.nextElementSibling;
        if (panel.style.display === "block") {
            panel.style.display = "none";
        } else {
            panel.style.display = "block";
        }
    });
  }

  var durationAndStats = document.getElementsByClassName("tagFunction");
  for (i = 0; i < durationAndStats.length; i++) {
    durationAndStats[i].addEventListener("click", function() {
        this.classList.toggle("active");
        var panel = this.nextElementSibling;
        if (panel.style.display === "block") {
            panel.style.display = "none";
        } else {
            panel.style.display = "block";
        }
    });
  }

  var durationAndStats = document.getElementsByClassName("functions");
  for (i = 0; i < durationAndStats.length; i++) {
    durationAndStats[i].addEventListener("click", function() {
        this.classList.toggle("active");
        var panel = this.nextElementSibling;
        if (panel.style.display === "block") {
            panel.style.display = "none";
        } else {
            panel.style.display = "block";
        }
    });
  }

  function showGraph(evt, menuItem) {
    var graphs = document.getElementsByClassName(menuItem);
    if (graphs[0].className !== menuItem) {
      var newMenuItem = menuItem.split('graph1')[0] + 'table';
      var table = document.getElementsByClassName(newMenuItem);
      table[0].className += " hide"
      graphs[0].className = menuItem;
    }
  }

  function showTable(evt, menuItem) {
    var tables = document.getElementsByClassName(menuItem);
    if (tables[0].className !== menuItem) {
      var newMenuItem = menuItem.split('table')[0] + 'graph';
      var graph = document.getElementsByClassName(newMenuItem + 1);
      graph[0].className += " hide";
      tables[0].className = menuItem;
    }
  }

  function showGraph2(evt, menuItem) {
    var graphs = document.getElementsByClassName(menuItem);
    if (graphs[0].className !== menuItem) {
      var newMenuItem = menuItem.split('graph2')[0] + 'table2';
      var table = document.getElementsByClassName(newMenuItem);
      table[0].className += " hide"
      graphs[0].className = menuItem;
    }
  }

  function showTable2(evt, menuItem) {
    var tables = document.getElementsByClassName(menuItem);
    if (tables[0].className !== menuItem) {
      var newMenuItem = menuItem.split('table2')[0] + 'graph';
      var graph = document.getElementsByClassName(newMenuItem + 2);
      graph[0].className += " hide";
      tables[0].className = menuItem;
    }
  }


</script>
</body>
</html>

